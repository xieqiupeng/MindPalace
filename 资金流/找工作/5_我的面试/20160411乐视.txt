1、asyncTask内部实现原理

总结：
1、 AsyncTask的本质是一个静态的线程池，AsyncTask派生出的子类可以实现不同的异步任务，这些任务都是提交到静态的线程池中执行。
2、线程池中的工作线程执行doInBackground(mParams)方法执行异步任务
3、当任务状态改变之后，工作线程会向UI线程发送消息，AsyncTask内部的InternalHandler响应这些消息，并调用相关的回调函数
有一个WorkerRunnable 有一个自定义InternalHandler

2、值传递与引用传递
基本类型是值传递，short、int、long、float、double、boolean、char。复制复制。内存中分配2份数据。
类类型是引用传递。2个引用都指向内存的一份相同数据

3、多渠道打包
productFlavors

4、Java中的内存模型图

Java栈

3、内部类和静态内部类区别

一、非静态内部类：
1、变量和方法不能声明为静态的。(类的编译顺序：外部类--静态方法或属性--内部类，如果内部类声明为静态的，造成编译顺序冲突。个人理解)
2、实例化的时候需要依附在外部类上面。比如：B是A的非静态内部类，实例化B，则：A.B b = new A().new B();
3、内部类可以引用外部类的静态或者非静态属性或者方法。

二、静态内部类：
1、属性和方法可以声明为静态的或者非静态的。
2、实例化静态内部类：比如：B是A的静态内部类，A.B b = new A.B();
3、内部类只能引用外部类的静态的属性或者方法。
4、如果属性或者方法声明为静态的，那么可以直接通过类名直接使用。比如B是A的静态内部类，b（）是B中的一个静态属性，则可以：A.B.b();